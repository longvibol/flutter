Create bottonSheet : 

Note: https://fvm.app/ (to maintance the code version)


Gold : when click on the filter Icone then it will show up the bottonsheet 

Search : showModalBottomSheet<T> function

Link : https://api.flutter.dev/flutter/material/showModalBottomSheet.html?gad_source=1&gclid=Cj0KCQiAx9q6BhCDARIsACwUxu5edgBZefySxiEPjeD73Uqm60hsjzCn3NZMND0vIOOz2zY_-QfXdKYaAiMlEALw_wcB&gclsrc=aw.ds


----------------------------

Step by Step to create : 

1. We need to use StateFullWidget 

Icon Action :


IconButton(
                      onPressed: () {

                        showModalBottomSheet<void>(
                          context: context,
                          builder: (BuildContext context) {
                            return SizedBox.expand(
                              child: Center(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  mainAxisSize: MainAxisSize.min,
                                  children: <Widget>[
                                    const Text('Modal bottom sheet'),
                                    ElevatedButton(
                                      child: const Text('Close'),
                                      onPressed: () => Navigator.pop(context),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        );
                      }, icon: Icon(Icons.filter_list_alt)),

==================================================================================================

2. Function when clink on the icons 

var lstProducts = []; // emtply array
  var lstSearchResult = [];
  var isSearch = false;

  Future<List> fetchData() async {
    final url = Uri.https(productUrl, "products");
    final response = await http.get(url);
    return jsonDecode(response.body) as List;
  }

3. Scaffold widget : 

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}


3.1 called class to crate view :

class _HomeState extends State<Home> {
  var lstProducts = []; // emtply array
  var lstSearchResult = [];
  var isSearch = false;

  Future<List> fetchData() async {
    final url = Uri.https(productUrl, "products");
    final response = await http.get(url);
    return jsonDecode(response.body) as List;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                    child: TextFormField(
                  decoration: InputDecoration(hintText: "Search Product"),
                  onChanged: (value) {
                    if (value.isEmpty) {
                      setState(() {
                        isSearch = false;
                      });
                    }
                  },
                  onFieldSubmitted: (value) {
                    isSearch = true;
                    lstSearchResult = lstProducts
                        .where((product) => product['title']
                            .toLowerCase()
                            .contains(value.toLowerCase()))
                        .toList();
                    setState(() {});
                  },
                )),
                IconButton(
                    onPressed: () {
                      showModalBottomSheet<void>(
                        context: context,
                        builder: (BuildContext context) {
                          return SizedBox.expand(
                            child: Center(
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                mainAxisSize: MainAxisSize.min,
                                children: <Widget>[
                                  const Text('Modal bottom sheet'),
                                  ElevatedButton(
                                    child: const Text('Close'),
                                    onPressed: () => Navigator.pop(context),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    },
                    icon: Icon(Icons.filter_list_alt)),
              ],
            ),
            !isSearch
                ? Expanded(
                    child: FutureBuilder(
                      future: fetchData(),
                      builder: (context, snapshot) {
                        if (snapshot.connectionState ==
                            ConnectionState.waiting) {
                          return Center(
                            child: CircularProgressIndicator(),
                          );
                        }
                        if (snapshot.hasError) {
                          return Center(
                            child: Text("${snapshot.error}"),
                          );
                        }

                        lstProducts = snapshot.data ?? [];

                        return ListView.builder(
                            itemCount: snapshot.data != null
                                ? snapshot.data!.length
                                : 0,
                            itemBuilder: (context, index) {
                              final product = snapshot.data![index];
                              return ListTile(
                                title: Text("${product['title']}"),
                                leading: Image.network(product['image']),
                                trailing: Text("\$${product['price']}"),
                              );
                            });
                      },
                    ),
                  )
                : Expanded(
                    child: ListView.builder(
                        itemCount: lstSearchResult.length,
                        itemBuilder: (context, index) {
                          final product = lstSearchResult[index];
                          return ListTile(
                            leading: Image.network("${product['image']}"),
                            title: Text("${product['title']}"),
                            trailing: Text("\$${product['price']}"),
                          );
                        }),
                  )
          ],
        ),
      ),
    );
  }
}


====================================================================

































































































